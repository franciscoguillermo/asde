diff --git a/net/minecraft/block/Block.java b/net/minecraft/block/Block.java
index 6d7a6ee..b415aa9 100644
--- a/net/minecraft/block/Block.java
+++ b/net/minecraft/block/Block.java
@@ -2,6 +2,9 @@ package net.minecraft.block;
 
 import com.google.common.collect.Sets;
 import com.google.common.collect.UnmodifiableIterator;
+
+import de.paxii.clarinet.module.render.ModuleXray;
+
 import java.util.List;
 import java.util.Random;
 import java.util.Set;
@@ -487,6 +490,14 @@ public class Block
     @Deprecated
     public boolean shouldSideBeRendered(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
     {
+        //TODO: Client
+            if (ModuleXray.isActive()) {
+                if (ModuleXray.getBlockList().contains(REGISTRY.getIDForObject(this))) {
+                    return true;
+                }
+            }
+        //
+
         AxisAlignedBB axisalignedbb = blockState.getBoundingBox(blockAccess, pos);
 
         switch (side)
@@ -799,6 +810,16 @@ public class Block
 
     public BlockRenderLayer getBlockLayer()
     {
+        //TODO: Client
+            if (ModuleXray.isActive()) {
+                if (ModuleXray.getBlockList().contains(REGISTRY.getIDForObject(this))) {
+                    return BlockRenderLayer.SOLID;
+                }
+
+                return BlockRenderLayer.TRANSLUCENT;
+            }
+        //
+
         return BlockRenderLayer.SOLID;
     }
 
@@ -1462,4 +1483,10 @@ public class Block
         XZ,
         XYZ;
     }
+
+    //TODO: Client
+        public Material getMaterial() {
+        return this.blockMaterial;
+    }
+    //
 }
diff --git a/net/minecraft/block/BlockBush.java b/net/minecraft/block/BlockBush.java
index e991d85..153d1a8 100644
--- a/net/minecraft/block/BlockBush.java
+++ b/net/minecraft/block/BlockBush.java
@@ -1,5 +1,7 @@
 package net.minecraft.block;
 
+import de.paxii.clarinet.module.render.ModuleXray;
+
 import java.util.Random;
 import javax.annotation.Nullable;
 import net.minecraft.block.material.MapColor;
@@ -103,6 +105,12 @@ public class BlockBush extends Block
 
     public BlockRenderLayer getBlockLayer()
     {
+        //TODO: Client
+            if (ModuleXray.isActive()) {
+                return super.getBlockLayer();
+            }
+        //
+
         return BlockRenderLayer.CUTOUT;
     }
 }
diff --git a/net/minecraft/block/BlockCactus.java b/net/minecraft/block/BlockCactus.java
index f170b8b..f6f152b 100644
--- a/net/minecraft/block/BlockCactus.java
+++ b/net/minecraft/block/BlockCactus.java
@@ -1,5 +1,7 @@
 package net.minecraft.block;
 
+import de.paxii.clarinet.module.render.ModuleXray;
+
 import java.util.Random;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
@@ -130,6 +132,12 @@ public class BlockCactus extends Block
 
     public BlockRenderLayer getBlockLayer()
     {
+        //TODO: Client
+            if (ModuleXray.isActive()) {
+                return super.getBlockLayer();
+            }
+        //
+
         return BlockRenderLayer.CUTOUT;
     }
 
diff --git a/net/minecraft/block/BlockGrass.java b/net/minecraft/block/BlockGrass.java
index 3d09278..52145cb 100644
--- a/net/minecraft/block/BlockGrass.java
+++ b/net/minecraft/block/BlockGrass.java
@@ -1,5 +1,7 @@
 package net.minecraft.block;
 
+import de.paxii.clarinet.module.render.ModuleXray;
+
 import java.util.Random;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
@@ -145,6 +147,12 @@ public class BlockGrass extends Block implements IGrowable
 
     public BlockRenderLayer getBlockLayer()
     {
+        //TODO: Client
+            if (ModuleXray.isActive()) {
+                return super.getBlockLayer();
+            }
+        //
+
         return BlockRenderLayer.CUTOUT_MIPPED;
     }
 
diff --git a/net/minecraft/block/BlockLeaves.java b/net/minecraft/block/BlockLeaves.java
index 3a41636..18721d9 100644
--- a/net/minecraft/block/BlockLeaves.java
+++ b/net/minecraft/block/BlockLeaves.java
@@ -1,5 +1,7 @@
 package net.minecraft.block;
 
+import de.paxii.clarinet.module.render.ModuleXray;
+
 import java.util.Random;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.PropertyBool;
@@ -277,6 +279,12 @@ public abstract class BlockLeaves extends Block
 
     public BlockRenderLayer getBlockLayer()
     {
+        //TODO: Client
+            if (ModuleXray.isActive()) {
+                return super.getBlockLayer();
+            }
+        //
+
         return this.leavesFancy ? BlockRenderLayer.CUTOUT_MIPPED : BlockRenderLayer.SOLID;
     }
 
diff --git a/net/minecraft/client/Minecraft.java b/net/minecraft/client/Minecraft.java
index 20bd020..6199aa4 100644
--- a/net/minecraft/client/Minecraft.java
+++ b/net/minecraft/client/Minecraft.java
@@ -13,6 +13,12 @@ import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.authlib.properties.PropertyMap;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
+
+import de.paxii.clarinet.Client;
+import de.paxii.clarinet.event.EventManager;
+import de.paxii.clarinet.event.events.game.StartGameEvent;
+import de.paxii.clarinet.event.events.gui.DisplayGuiScreenEvent;
+
 import java.awt.image.BufferedImage;
 import java.io.File;
 import java.io.IOException;
@@ -200,6 +206,9 @@ import org.lwjgl.opengl.OpenGLException;
 import org.lwjgl.opengl.PixelFormat;
 import org.lwjgl.util.glu.GLU;
 
+import lombok.Getter;
+import lombok.Setter;
+
 public class Minecraft implements IThreadListener, ISnooperInfo
 {
     private static final Logger LOGGER = LogManager.getLogger();
@@ -236,7 +245,11 @@ public class Minecraft implements IThreadListener, ISnooperInfo
 
     /** True if the player is connected to a realms server */
     private boolean connectedToRealms;
-    private final Timer timer = new Timer(20.0F);
+    //TODO: Client
+        @Getter
+        @Setter
+    //
+    private Timer timer = new Timer(20.0F);
 
     /** Instance of PlayerUsageSnooper. */
     private final Snooper usageSnooper = new Snooper("client", this, MinecraftServer.getCurrentTimeMillis());
@@ -250,7 +263,10 @@ public class Minecraft implements IThreadListener, ISnooperInfo
     private Entity renderViewEntity;
     public Entity pointedEntity;
     public ParticleManager effectRenderer;
-    private final Session session;
+    //TODO: Client
+        @Setter
+        private Session session;
+    //
     private boolean isGamePaused;
 
     /** The font renderer used for displaying and measuring text */
@@ -279,7 +295,11 @@ public class Minecraft implements IThreadListener, ISnooperInfo
 
     /** Gui achievement */
     public GuiAchievement guiAchievement;
-    public GuiIngame ingameGUI;
+
+    //TODO: Client
+        @Getter
+        public GuiIngame ingameGUI;
+    //
 
     /** Skip render world */
     public boolean skipRenderWorld;
@@ -308,7 +328,11 @@ public class Minecraft implements IThreadListener, ISnooperInfo
     /**
      * When you place a block, it's set to 6, decremented once per tick, when it's 0, you can place another block.
      */
-    private int rightClickDelayTimer;
+    //TODO: Client
+        @Getter
+        @Setter
+        private int rightClickDelayTimer;
+    //
     private String serverName;
     private int serverPort;
 
@@ -592,6 +616,10 @@ public class Minecraft implements IThreadListener, ISnooperInfo
         this.checkGLError("Post startup");
         this.ingameGUI = new GuiIngame(this);
 
+        //TODO: Client
+            new Client();
+        //
+
         if (this.serverName != null)
         {
             this.displayGuiScreen(new GuiConnecting(new GuiMainMenu(), this, this.serverName, this.serverPort));
@@ -622,6 +650,10 @@ public class Minecraft implements IThreadListener, ISnooperInfo
         }
 
         this.renderGlobal.makeEntityOutlineShader();
+
+        //TODO: Client
+            EventManager.call(new StartGameEvent());
+        //
     }
 
     private void registerMetadataSerializers()
@@ -996,6 +1028,12 @@ public class Minecraft implements IThreadListener, ISnooperInfo
      */
     public void displayGuiScreen(@Nullable GuiScreen guiScreenIn)
     {
+        //TODO: Client
+            DisplayGuiScreenEvent guiScreenEvent = new DisplayGuiScreenEvent(guiScreenIn);
+            EventManager.call(guiScreenEvent);
+            guiScreenIn = guiScreenEvent.getGuiScreen();
+        //
+
         if (this.currentScreen != null)
         {
             this.currentScreen.onGuiClosed();
@@ -3271,9 +3309,12 @@ public class Minecraft implements IThreadListener, ISnooperInfo
                     {
                         this.toggleFullscreen();
                     }
-                    else if (i == this.gameSettings.keyBindScreenshot.getKeyCode())
-                    {
-                        this.ingameGUI.getChatGUI().printChatMessage(ScreenShotHelper.saveScreenshot(this.mcDataDir, this.displayWidth, this.displayHeight, this.framebufferMc));
+                    else if (i == this.gameSettings.keyBindScreenshot.getKeyCode()) {
+                        //TODO: Client
+                        //Fix Screenshot bug when pressing '<' on german keyboards in chat
+                        if (Keyboard.getEventKey() != 0) {
+                            this.ingameGUI.getChatGUI().printChatMessage(ScreenShotHelper.saveScreenshot(this.mcDataDir, this.displayWidth, this.displayHeight, this.framebufferMc));
+                        }
                     }
                 }
             }
diff --git a/net/minecraft/client/entity/EntityPlayerSP.java b/net/minecraft/client/entity/EntityPlayerSP.java
index 0728387..fdfe0fc 100644
--- a/net/minecraft/client/entity/EntityPlayerSP.java
+++ b/net/minecraft/client/entity/EntityPlayerSP.java
@@ -1,5 +1,12 @@
 package net.minecraft.client.entity;
 
+import de.paxii.clarinet.Wrapper;
+import de.paxii.clarinet.event.EventManager;
+import de.paxii.clarinet.event.events.player.PlayerMoveEvent;
+import de.paxii.clarinet.event.events.player.PlayerUpdateWalkingEvent;
+import de.paxii.clarinet.event.events.player.PostMotionUpdateEvent;
+import de.paxii.clarinet.event.events.player.PreMotionUpdateEvent;
+
 import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.block.state.IBlockState;
@@ -224,10 +231,36 @@ public class EntityPlayerSP extends AbstractClientPlayer
      */
     public void onUpdate()
     {
+        //TODO: Client
+            if (this.motionX != 0 || this.motionY != -0.0784000015258789 || this.motionZ != 0) {
+                PlayerMoveEvent moveEvent = new PlayerMoveEvent(this);
+                EventManager.call(moveEvent);
+
+                if (moveEvent.isCancelled())
+                    return;
+
+                this.motionX = moveEvent.getMotionX();
+                this.motionY = moveEvent.getMotionY();
+                this.motionZ = moveEvent.getMotionZ();
+
+                this.posX = moveEvent.getPosX();
+                this.posY = moveEvent.getPosY();
+                this.posZ = moveEvent.getPosZ();
+            }
+        //
         if (this.world.isBlockLoaded(new BlockPos(this.posX, 0.0D, this.posZ)))
         {
             super.onUpdate();
 
+            //TODO: Client
+                PreMotionUpdateEvent preMotionEvent = new PreMotionUpdateEvent(this);
+                EventManager.call(preMotionEvent);
+
+                if (preMotionEvent.isCancelled()) {
+                    return;
+                }
+            //
+
             if (this.isRiding())
             {
                 this.connection.sendPacket(new CPacketPlayer.Rotation(this.rotationYaw, this.rotationPitch, this.onGround));
@@ -243,6 +276,11 @@ public class EntityPlayerSP extends AbstractClientPlayer
             {
                 this.onUpdateWalkingPlayer();
             }
+
+            //TODO: Client
+                PostMotionUpdateEvent postMotion = new PostMotionUpdateEvent(this);
+                EventManager.call(postMotion);
+            //
         }
     }
 
@@ -295,6 +333,12 @@ public class EntityPlayerSP extends AbstractClientPlayer
             boolean flag2 = d0 * d0 + d1 * d1 + d2 * d2 > 9.0E-4D || this.positionUpdateTicks >= 20;
             boolean flag3 = d3 != 0.0D || d4 != 0.0D;
 
+            // TODO: Client
+                PlayerUpdateWalkingEvent updateWalkingEvent = EventManager.call(new PlayerUpdateWalkingEvent());
+
+                if (!updateWalkingEvent.isCancelled())
+            //
+
             if (this.isRiding())
             {
                 this.connection.sendPacket(new CPacketPlayer.PositionRotation(this.motionX, -999.0D, this.motionZ, this.rotationYaw, this.rotationPitch, this.onGround));
@@ -947,9 +991,13 @@ public class EntityPlayerSP extends AbstractClientPlayer
 
         if (this.isHandActive() && !this.isRiding())
         {
-            this.movementInput.moveStrafe *= 0.2F;
-            this.movementInput.moveForward *= 0.2F;
-            this.sprintToggleTimer = 0;
+            //TODO: Client
+                if (!Wrapper.getModuleManager().isModuleActive("NoItemSlowdown")) {
+                    this.movementInput.moveStrafe *= 0.2F;
+                    this.movementInput.moveForward *= 0.2F;
+                    this.sprintToggleTimer = 0;
+                }
+            //
         }
 
         boolean flag3 = false;
diff --git a/net/minecraft/client/gui/FontRenderer.java b/net/minecraft/client/gui/FontRenderer.java
index 565f500..fd9c791 100644
--- a/net/minecraft/client/gui/FontRenderer.java
+++ b/net/minecraft/client/gui/FontRenderer.java
@@ -28,6 +28,8 @@ import net.minecraft.src.FontUtils;
 import net.minecraft.util.ResourceLocation;
 import org.apache.commons.io.IOUtils;
 
+import lombok.Getter;
+
 public class FontRenderer implements IResourceManagerReloadListener
 {
     private static final ResourceLocation[] UNICODE_PAGE_LOCATIONS = new ResourceLocation[256];
@@ -48,7 +50,10 @@ public class FontRenderer implements IResourceManagerReloadListener
      * Array of RGB triplets defining the 16 standard chat colors followed by 16 darker version of the same colors for
      * drop shadows.
      */
-    private final int[] colorCode = new int[32];
+    //TODO: Client
+        @Getter
+        private final int[] colorCode = new int[32];
+    //
     private ResourceLocation locationFontTexture;
 
     /** The RenderEngine used to load and setup glyph textures. */
diff --git a/net/minecraft/client/gui/Gui.java b/net/minecraft/client/gui/Gui.java
index 58e6a77..19c42c0 100644
--- a/net/minecraft/client/gui/Gui.java
+++ b/net/minecraft/client/gui/Gui.java
@@ -17,7 +17,7 @@ public class Gui
     /**
      * Draws a thin horizontal line between two points.
      */
-    protected void drawHorizontalLine(int startX, int endX, int y, int color)
+    protected static void drawHorizontalLine(int startX, int endX, int y, int color)
     {
         if (endX < startX)
         {
@@ -32,7 +32,7 @@ public class Gui
     /**
      * Draw a 1 pixel wide vertical line. Args : x, y1, y2, color
      */
-    protected void drawVerticalLine(int x, int startY, int endY, int color)
+    protected static void drawVerticalLine(int x, int startY, int endY, int color)
     {
         if (endY < startY)
         {
@@ -79,6 +79,9 @@ public class Gui
         vertexbuffer.pos((double)right, (double)top, 0.0D).endVertex();
         vertexbuffer.pos((double)left, (double)top, 0.0D).endVertex();
         tessellator.draw();
+        //TODO: Client
+            GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
+        //
         GlStateManager.enableTexture2D();
         GlStateManager.disableBlend();
     }
diff --git a/net/minecraft/client/gui/GuiChat.java b/net/minecraft/client/gui/GuiChat.java
index 968b82d..46304ad 100644
--- a/net/minecraft/client/gui/GuiChat.java
+++ b/net/minecraft/client/gui/GuiChat.java
@@ -15,6 +15,9 @@ import org.apache.logging.log4j.Logger;
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
 
+import lombok.Getter;
+import lombok.Setter;
+
 public class GuiChat extends GuiScreen implements ITabCompleter
 {
     private static final Logger LOGGER = LogManager.getLogger();
@@ -33,7 +36,11 @@ public class GuiChat extends GuiScreen implements ITabCompleter
     /**
      * is the text that appears when you press the chat key and the input box appears pre-filled
      */
-    private String defaultInputFieldText = "";
+    //TODO: Client
+        @Getter
+        @Setter
+        private String defaultInputFieldText = "";
+    //
 
     public GuiChat()
     {
diff --git a/net/minecraft/client/gui/GuiScreen.java b/net/minecraft/client/gui/GuiScreen.java
index 85d2c91..c82372d 100644
--- a/net/minecraft/client/gui/GuiScreen.java
+++ b/net/minecraft/client/gui/GuiScreen.java
@@ -3,6 +3,10 @@ package net.minecraft.client.gui;
 import com.google.common.base.Splitter;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
+
+import de.paxii.clarinet.event.EventManager;
+import de.paxii.clarinet.event.events.gui.RenderGuiScreenEvent;
+
 import java.awt.Toolkit;
 import java.awt.datatransfer.ClipboardOwner;
 import java.awt.datatransfer.DataFlavor;
@@ -84,6 +88,11 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
      */
     public void drawScreen(int mouseX, int mouseY, float partialTicks)
     {
+        //TODO: Client
+            RenderGuiScreenEvent renderScreen = new RenderGuiScreenEvent(mouseX, mouseY, partialTicks);
+            EventManager.call(renderScreen);
+        //
+
         for (int i = 0; i < this.buttonList.size(); ++i)
         {
             ((GuiButton)this.buttonList.get(i)).drawButton(this.mc, mouseX, mouseY);
diff --git a/net/minecraft/client/gui/GuiSlot.java b/net/minecraft/client/gui/GuiSlot.java
index 52bc9a8..9415051 100644
--- a/net/minecraft/client/gui/GuiSlot.java
+++ b/net/minecraft/client/gui/GuiSlot.java
@@ -23,7 +23,9 @@ public abstract class GuiSlot
     protected int left;
 
     /** The height of a slot. */
-    protected final int slotHeight;
+    //TODO: Client
+        protected int slotHeight;
+    //
 
     /** The buttonID of the button used to scroll up */
     private int scrollUpButtonID;
diff --git a/net/minecraft/client/gui/GuiTextField.java b/net/minecraft/client/gui/GuiTextField.java
index db51c82..9e4363a 100644
--- a/net/minecraft/client/gui/GuiTextField.java
+++ b/net/minecraft/client/gui/GuiTextField.java
@@ -11,51 +11,53 @@ import net.minecraft.util.math.MathHelper;
 
 public class GuiTextField extends Gui
 {
-    private final int id;
-    private final FontRenderer fontRendererInstance;
-    public int xPosition;
-    public int yPosition;
-
-    /** The width of this text field. */
-    private final int width;
-    private final int height;
-
-    /** Has the current text being edited on the textbox. */
-    private String text = "";
-    private int maxStringLength = 32;
-    private int cursorCounter;
-    private boolean enableBackgroundDrawing = true;
-
-    /**
-     * if true the textbox can lose focus by clicking elsewhere on the screen
-     */
-    private boolean canLoseFocus = true;
-
-    /**
-     * If this value is true along with isEnabled, keyTyped will process the keys.
-     */
-    private boolean isFocused;
-
-    /**
-     * If this value is true along with isFocused, keyTyped will process the keys.
-     */
-    private boolean isEnabled = true;
-
-    /**
-     * The current character index that should be used as start of the rendered text.
-     */
-    private int lineScrollOffset;
-    private int cursorPosition;
-
-    /** other selection position, maybe the same as the cursor */
-    private int selectionEnd;
-    private int enabledColor = 14737632;
-    private int disabledColor = 7368816;
-
-    /** True if this textbox is visible */
-    private boolean visible = true;
-    private GuiPageButtonList.GuiResponder guiResponder;
-    private Predicate<String> validator = Predicates.<String>alwaysTrue();
+    // TODO: Client
+        protected final int id;
+        protected final FontRenderer fontRendererInstance;
+        public int xPosition;
+        public int yPosition;
+
+        /** The width of this text field. */
+        protected final int width;
+        protected final int height;
+
+        /** Has the current text being edited on the textbox. */
+        protected String text = "";
+        protected int maxStringLength = 32;
+        protected int cursorCounter;
+        protected boolean enableBackgroundDrawing = true;
+
+        /**
+         * if true the textbox can lose focus by clicking elsewhere on the screen
+         */
+        protected boolean canLoseFocus = true;
+
+        /**
+         * If this value is true along with isEnabled, keyTyped will process the keys.
+         */
+        protected boolean isFocused;
+
+        /**
+         * If this value is true along with isFocused, keyTyped will process the keys.
+         */
+        protected boolean isEnabled = true;
+
+        /**
+         * The current character index that should be used as start of the rendered text.
+         */
+        protected int lineScrollOffset;
+        protected int cursorPosition;
+
+        /** other selection position, maybe the same as the cursor */
+        protected int selectionEnd;
+        protected int enabledColor = 14737632;
+        protected int disabledColor = 7368816;
+
+        /** True if this textbox is visible */
+        protected boolean visible = true;
+        protected GuiPageButtonList.GuiResponder guiResponder;
+        protected Predicate<String> validator = Predicates.<String>alwaysTrue();
+    //
 
     public GuiTextField(int componentId, FontRenderer fontrendererObj, int x, int y, int par5Width, int par6Height)
     {
@@ -603,7 +605,7 @@ public class GuiTextField extends Gui
     /**
      * Draws the current selection and a vertical line cursor in the text box.
      */
-    private void drawCursorVertical(int startX, int startY, int endX, int endY)
+    protected void drawCursorVertical(int startX, int startY, int endX, int endY)
     {
         if (startX < endX)
         {
diff --git a/net/minecraft/client/gui/inventory/GuiEditSign.java b/net/minecraft/client/gui/inventory/GuiEditSign.java
index 45afaf7..5636f30 100644
--- a/net/minecraft/client/gui/inventory/GuiEditSign.java
+++ b/net/minecraft/client/gui/inventory/GuiEditSign.java
@@ -1,5 +1,9 @@
 package net.minecraft.client.gui.inventory;
 
+import de.paxii.clarinet.event.EventManager;
+import de.paxii.clarinet.event.events.gui.sign.StartEditSignEvent;
+import de.paxii.clarinet.event.events.gui.sign.StopEditSignEvent;
+
 import java.io.IOException;
 import net.minecraft.block.Block;
 import net.minecraft.client.gui.GuiButton;
@@ -44,6 +48,22 @@ public class GuiEditSign extends GuiScreen
         Keyboard.enableRepeatEvents(true);
         this.doneBtn = this.addButton(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 120, I18n.format("gui.done", new Object[0])));
         this.tileSign.setEditable(false);
+
+        // TODO: Client
+            StartEditSignEvent startEditSignEvent = new StartEditSignEvent(this.tileSign);
+            EventManager.call(startEditSignEvent);
+
+            for (int i = 0; i < startEditSignEvent.getSignText().length; i++) {
+                this.tileSign.signText[i] = startEditSignEvent.getSignText()[i];
+            }
+
+            this.editLine = startEditSignEvent.getEditLine();
+
+            if (startEditSignEvent.isCloseGui()) {
+                this.tileSign.markDirty();
+                this.mc.displayGuiScreen(null);
+            }
+        //
     }
 
     /**
@@ -51,6 +71,17 @@ public class GuiEditSign extends GuiScreen
      */
     public void onGuiClosed()
     {
+        // TODO: Client
+            StopEditSignEvent stopEditSignEvent = new StopEditSignEvent(this.tileSign);
+            EventManager.call(stopEditSignEvent);
+
+            for (int i = 0; i < stopEditSignEvent.getSignText().length; i++) {
+                this.tileSign.signText[i] = stopEditSignEvent.getSignText()[i];
+            }
+
+            this.editLine = stopEditSignEvent.getEditLine();
+        //
+
         Keyboard.enableRepeatEvents(false);
         NetHandlerPlayClient nethandlerplayclient = this.mc.getConnection();
 
diff --git a/net/minecraft/client/multiplayer/PlayerControllerMP.java b/net/minecraft/client/multiplayer/PlayerControllerMP.java
index 82169d6..c003c16 100644
--- a/net/minecraft/client/multiplayer/PlayerControllerMP.java
+++ b/net/minecraft/client/multiplayer/PlayerControllerMP.java
@@ -1,5 +1,11 @@
 package net.minecraft.client.multiplayer;
 
+import de.paxii.clarinet.event.EventManager;
+import de.paxii.clarinet.event.events.block.BlockBreakEvent;
+import de.paxii.clarinet.event.events.player.PlayerAttackEntityEvent;
+import de.paxii.clarinet.event.events.player.PlayerClickBlockEvent;
+import de.paxii.clarinet.event.events.player.PostPlayerAttackEntityEvent;
+
 import io.netty.buffer.Unpooled;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockCommandBlock;
@@ -170,6 +176,11 @@ public class PlayerControllerMP
             }
             else
             {
+                //TODO: Client
+                    BlockBreakEvent blockBreakEvent = new BlockBreakEvent(block, pos);
+                    EventManager.call(blockBreakEvent);
+                //
+
                 world.playEvent(2001, pos, Block.getStateId(iblockstate));
                 block.onBlockHarvested(world, pos, iblockstate, this.mc.player);
                 boolean flag = world.setBlockState(pos, Blocks.AIR.getDefaultState(), 11);
@@ -206,6 +217,15 @@ public class PlayerControllerMP
      */
     public boolean clickBlock(BlockPos loc, EnumFacing face)
     {
+        //TODO: Client
+            PlayerClickBlockEvent clickBlockEvent = new PlayerClickBlockEvent(loc, face);
+            EventManager.call(clickBlockEvent);
+
+            if (clickBlockEvent.isCancelled()) {
+                return false;
+            }
+        //
+
         if (this.currentGameType.isAdventure())
         {
             if (this.currentGameType == GameType.SPECTATOR)
@@ -521,6 +541,17 @@ public class PlayerControllerMP
      */
     public void attackEntity(EntityPlayer playerIn, Entity targetEntity)
     {
+        //TODO: Client
+            PlayerAttackEntityEvent attackEvent = new PlayerAttackEntityEvent(playerIn, targetEntity);
+            EventManager.call(attackEvent);
+
+            if (attackEvent.isCancelled()) {
+                return;
+            }
+
+            targetEntity = attackEvent.getTarget();
+        //
+
         this.syncCurrentPlayItem();
         this.connection.sendPacket(new CPacketUseEntity(targetEntity));
 
@@ -529,6 +560,11 @@ public class PlayerControllerMP
             playerIn.attackTargetEntityWithCurrentItem(targetEntity);
             playerIn.resetCooldown();
         }
+
+        //TODO: Client
+            PostPlayerAttackEntityEvent postAttackEvent = new PostPlayerAttackEntityEvent(playerIn, targetEntity);
+            EventManager.call(postAttackEvent);
+        //
     }
 
     /**
diff --git a/net/minecraft/client/multiplayer/WorldClient.java b/net/minecraft/client/multiplayer/WorldClient.java
index 5f10479..def1954 100644
--- a/net/minecraft/client/multiplayer/WorldClient.java
+++ b/net/minecraft/client/multiplayer/WorldClient.java
@@ -1,6 +1,10 @@
 package net.minecraft.client.multiplayer;
 
 import com.google.common.collect.Sets;
+
+import de.paxii.clarinet.event.EventManager;
+import de.paxii.clarinet.event.events.game.QuitServerEvent;
+
 import java.util.Random;
 import java.util.Set;
 import javax.annotation.Nullable;
@@ -349,6 +353,10 @@ public class WorldClient extends World
      */
     public void sendQuittingDisconnectingPacket()
     {
+        //TODO: Client
+            EventManager.call(new QuitServerEvent());
+        //
+
         this.connection.getNetworkManager().closeChannel(new TextComponentString("Quitting"));
     }
 
diff --git a/net/minecraft/client/network/NetHandlerPlayClient.java b/net/minecraft/client/network/NetHandlerPlayClient.java
index 966ee81..af9f9d7 100644
--- a/net/minecraft/client/network/NetHandlerPlayClient.java
+++ b/net/minecraft/client/network/NetHandlerPlayClient.java
@@ -5,6 +5,12 @@ import com.google.common.collect.Maps;
 import com.google.common.util.concurrent.FutureCallback;
 import com.google.common.util.concurrent.Futures;
 import com.mojang.authlib.GameProfile;
+
+import de.paxii.clarinet.event.EventManager;
+import de.paxii.clarinet.event.PacketPatcher;
+import de.paxii.clarinet.event.events.chat.ReceiveChatEvent;
+import de.paxii.clarinet.event.events.entity.EntityVelocityEvent;
+
 import io.netty.buffer.Unpooled;
 import java.io.File;
 import java.io.IOException;
@@ -559,6 +565,17 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
      */
     public void handleEntityVelocity(SPacketEntityVelocity packetIn)
     {
+        //TODO: Client
+            EntityVelocityEvent velocityEvent = new EntityVelocityEvent(packetIn);
+            EventManager.call(velocityEvent);
+
+            if (velocityEvent.isCancelled()) {
+                return;
+            }
+
+            packetIn = velocityEvent.getVelocityPacket();
+        //
+
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.gameController);
         Entity entity = this.clientWorldController.getEntityByID(packetIn.getEntityID());
 
@@ -878,9 +895,23 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
 
     public void sendPacket(Packet<?> packetIn)
     {
+        //TODO: Client
+            packetIn = PacketPatcher.getPatchedPacket(packetIn);
+
+            if (packetIn == null) {
+                return;
+            }
+        //
+
         this.netManager.sendPacket(packetIn);
     }
 
+    //TODO: Client
+        public void addToSendQueue(Packet<?> packetIn) {
+        this.sendPacket(packetIn);
+    }
+    //
+
     public void handleCollectItem(SPacketCollectItem packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.gameController);
@@ -918,6 +949,20 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
      */
     public void handleChat(SPacketChat packetIn)
     {
+        //TODO: Client
+            ReceiveChatEvent chatEvent = new ReceiveChatEvent(packetIn.getChatComponent().getFormattedText());
+
+            EventManager.call(chatEvent);
+
+            if (chatEvent.isCancelled()) {
+                return;
+            }
+
+            if (!chatEvent.getChatMessage().equals(packetIn.getChatComponent().getFormattedText())) {
+                packetIn = new SPacketChat(new TextComponentTranslation(chatEvent.getChatMessage()), packetIn.getType());
+            }
+        //
+
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.gameController);
 
         if (packetIn.getType() == 2)
diff --git a/net/minecraft/client/renderer/EntityRenderer.java b/net/minecraft/client/renderer/EntityRenderer.java
index 7b9e05f..5c9c968 100644
--- a/net/minecraft/client/renderer/EntityRenderer.java
+++ b/net/minecraft/client/renderer/EntityRenderer.java
@@ -3,6 +3,11 @@ package net.minecraft.client.renderer;
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
 import com.google.gson.JsonSyntaxException;
+
+import de.paxii.clarinet.event.EventManager;
+import de.paxii.clarinet.event.events.game.IngameTickEvent;
+import de.paxii.clarinet.event.events.game.RenderTickEvent;
+
 import java.awt.Graphics;
 import java.awt.image.BufferedImage;
 import java.awt.image.ImageObserver;
@@ -93,6 +98,8 @@ import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GLContext;
 import org.lwjgl.util.glu.GLU;
 import org.lwjgl.util.glu.Project;
+
+import lombok.Getter;
 import shadersmod.client.Shaders;
 import shadersmod.client.ShadersRender;
 
@@ -118,7 +125,10 @@ public class EntityRenderer implements IResourceManagerReloadListener
     private int rendererUpdateCount;
 
     /** Pointed entity */
-    private Entity pointedEntity;
+    //TODO: Client
+        @Getter
+        private Entity pointedEntity;
+    //
     private MouseFilter mouseFilterXAxis = new MouseFilter();
     private MouseFilter mouseFilterYAxis = new MouseFilter();
     private final float thirdPersonDistance = 4.0F;
@@ -1365,6 +1375,10 @@ public class EntityRenderer implements IResourceManagerReloadListener
                     }
                 }
 
+                //TODO: Client
+                    EventManager.call(new IngameTickEvent());
+                //
+
                 this.mc.mcProfiler.endSection();
             }
 
@@ -1751,6 +1765,10 @@ public class EntityRenderer implements IResourceManagerReloadListener
             this.mc.debugRenderer.renderDebug(partialTicks, finishTimeNano);
         }
 
+        //TODO: Client
+            EventManager.call(new RenderTickEvent(partialTicks));
+        //
+
         if (!renderglobal.damagedBlocks.isEmpty())
         {
             this.mc.mcProfiler.endStartSection("destroyProgress");
diff --git a/net/minecraft/client/renderer/RenderGlobal.java b/net/minecraft/client/renderer/RenderGlobal.java
index 5f769f9..774592b 100644
--- a/net/minecraft/client/renderer/RenderGlobal.java
+++ b/net/minecraft/client/renderer/RenderGlobal.java
@@ -5,6 +5,8 @@ import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.google.gson.JsonSyntaxException;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+
+import java.awt.*;
 import java.io.IOException;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
@@ -3529,4 +3531,42 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
             this.setFacing = p_initialize_3_;
         }
     }
+
+    //TODO: Client
+        public static void drawOutlinedBoundingBox(AxisAlignedBB axisAlignedBB, int color) {
+            Color decode = new Color(color);
+
+            RenderGlobal.drawOutlinedBoundingBox(axisAlignedBB, decode.getRed(), decode.getGreen(), decode.getBlue(), decode.getAlpha());
+        }
+
+        public static void drawOutlinedBoundingBox(AxisAlignedBB boundingBox, int red, int green, int blue, int alpha)
+        {
+            Tessellator tessellator = Tessellator.getInstance();
+            VertexBuffer vertexbuffer = tessellator.getBuffer();
+            vertexbuffer.begin(3, DefaultVertexFormats.POSITION_COLOR);
+            vertexbuffer.pos(boundingBox.minX, boundingBox.minY, boundingBox.minZ).color(red, green, blue, alpha).endVertex();
+            vertexbuffer.pos(boundingBox.maxX, boundingBox.minY, boundingBox.minZ).color(red, green, blue, alpha).endVertex();
+            vertexbuffer.pos(boundingBox.maxX, boundingBox.minY, boundingBox.maxZ).color(red, green, blue, alpha).endVertex();
+            vertexbuffer.pos(boundingBox.minX, boundingBox.minY, boundingBox.maxZ).color(red, green, blue, alpha).endVertex();
+            vertexbuffer.pos(boundingBox.minX, boundingBox.minY, boundingBox.minZ).color(red, green, blue, alpha).endVertex();
+            tessellator.draw();
+            vertexbuffer.begin(3, DefaultVertexFormats.POSITION_COLOR);
+            vertexbuffer.pos(boundingBox.minX, boundingBox.maxY, boundingBox.minZ).color(red, green, blue, alpha).endVertex();
+            vertexbuffer.pos(boundingBox.maxX, boundingBox.maxY, boundingBox.minZ).color(red, green, blue, alpha).endVertex();
+            vertexbuffer.pos(boundingBox.maxX, boundingBox.maxY, boundingBox.maxZ).color(red, green, blue, alpha).endVertex();
+            vertexbuffer.pos(boundingBox.minX, boundingBox.maxY, boundingBox.maxZ).color(red, green, blue, alpha).endVertex();
+            vertexbuffer.pos(boundingBox.minX, boundingBox.maxY, boundingBox.minZ).color(red, green, blue, alpha).endVertex();
+            tessellator.draw();
+            vertexbuffer.begin(1, DefaultVertexFormats.POSITION_COLOR);
+            vertexbuffer.pos(boundingBox.minX, boundingBox.minY, boundingBox.minZ).color(red, green, blue, alpha).endVertex();
+            vertexbuffer.pos(boundingBox.minX, boundingBox.maxY, boundingBox.minZ).color(red, green, blue, alpha).endVertex();
+            vertexbuffer.pos(boundingBox.maxX, boundingBox.minY, boundingBox.minZ).color(red, green, blue, alpha).endVertex();
+            vertexbuffer.pos(boundingBox.maxX, boundingBox.maxY, boundingBox.minZ).color(red, green, blue, alpha).endVertex();
+            vertexbuffer.pos(boundingBox.maxX, boundingBox.minY, boundingBox.maxZ).color(red, green, blue, alpha).endVertex();
+            vertexbuffer.pos(boundingBox.maxX, boundingBox.maxY, boundingBox.maxZ).color(red, green, blue, alpha).endVertex();
+            vertexbuffer.pos(boundingBox.minX, boundingBox.minY, boundingBox.maxZ).color(red, green, blue, alpha).endVertex();
+            vertexbuffer.pos(boundingBox.minX, boundingBox.maxY, boundingBox.maxZ).color(red, green, blue, alpha).endVertex();
+            tessellator.draw();
+        }
+    //
 }
diff --git a/net/minecraft/client/renderer/VertexBuffer.java b/net/minecraft/client/renderer/VertexBuffer.java
index 7224a6b..a65f686 100644
--- a/net/minecraft/client/renderer/VertexBuffer.java
+++ b/net/minecraft/client/renderer/VertexBuffer.java
@@ -1,6 +1,9 @@
 package net.minecraft.client.renderer;
 
 import com.google.common.primitives.Floats;
+
+import de.paxii.clarinet.module.render.ModuleXray;
+
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.nio.FloatBuffer;
@@ -434,27 +437,29 @@ public class VertexBuffer
         int i = this.getColorIndex(vertexIndex);
         int j = -1;
 
-        if (!this.noColor)
-        {
-            j = this.rawIntBuffer.get(i);
-
-            if (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN)
-            {
-                int k = (int)((float)(j & 255) * red);
-                int l = (int)((float)(j >> 8 & 255) * green);
-                int i1 = (int)((float)(j >> 16 & 255) * blue);
-                j = j & -16777216;
-                j = j | i1 << 16 | l << 8 | k;
-            }
-            else
-            {
-                int j1 = (int)((float)(j >> 24 & 255) * red);
-                int k1 = (int)((float)(j >> 16 & 255) * green);
-                int l1 = (int)((float)(j >> 8 & 255) * blue);
-                j = j & 255;
-                j = j | j1 << 24 | k1 << 16 | l1 << 8;
+        //TODO: Client
+            if (ModuleXray.isActive()) {
+                j = ModuleXray.getXrayOpacity();
+            } else {
+                if (!this.noColor) {
+                    j = this.rawIntBuffer.get(i);
+
+                    if (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN) {
+                        int k = (int) ((float) (j & 255) * red);
+                        int l = (int) ((float) (j >> 8 & 255) * green);
+                        int i1 = (int) ((float) (j >> 16 & 255) * blue);
+                        j = j & -16777216;
+                        j = j | i1 << 16 | l << 8 | k;
+                    } else {
+                        int j1 = (int) ((float) (j >> 24 & 255) * red);
+                        int k1 = (int) ((float) (j >> 16 & 255) * green);
+                        int l1 = (int) ((float) (j >> 8 & 255) * blue);
+                        j = j & 255;
+                        j = j | j1 << 24 | k1 << 16 | l1 << 8;
+                    }
+                }
             }
-        }
+        //
 
         this.rawIntBuffer.put(i, j);
     }
diff --git a/net/minecraft/client/renderer/entity/Render.java b/net/minecraft/client/renderer/entity/Render.java
index ad07ac6..8d1e454 100644
--- a/net/minecraft/client/renderer/entity/Render.java
+++ b/net/minecraft/client/renderer/entity/Render.java
@@ -1,5 +1,7 @@
 package net.minecraft.client.renderer.entity;
 
+import de.paxii.clarinet.module.render.ModuleNameTags;
+
 import javax.annotation.Nullable;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.Minecraft;
@@ -386,7 +388,14 @@ public abstract class Render<T extends Entity> implements IEntityRenderer
             boolean flag1 = this.renderManager.options.thirdPersonView == 2;
             float f2 = entityIn.height + 0.5F - (flag ? 0.25F : 0.0F);
             int i = "deadmau5".equals(str) ? -10 : 0;
-            EntityRenderer.drawNameplate(this.getFontRendererFromRenderManager(), str, (float)x, (float)y + f2, (float)z, i, f, f1, flag1, flag);
+
+            // TODO: Client
+                if (ModuleNameTags.isActive()) {
+                    ModuleNameTags.drawHealthTags(entityIn, this.getFontRendererFromRenderManager(), str, (float)x, (float)y + f2, (float)z, i, f, f1, flag1, flag);
+                } else {
+                    EntityRenderer.drawNameplate(this.getFontRendererFromRenderManager(), str, (float)x, (float)y + f2, (float)z, i, f, f1, flag1, flag);
+                }
+            //
         }
     }
 
diff --git a/net/minecraft/client/renderer/entity/RenderManager.java b/net/minecraft/client/renderer/entity/RenderManager.java
index 091ce5b..59891c4 100644
--- a/net/minecraft/client/renderer/entity/RenderManager.java
+++ b/net/minecraft/client/renderer/entity/RenderManager.java
@@ -1,6 +1,11 @@
 package net.minecraft.client.renderer.entity;
 
 import com.google.common.collect.Maps;
+
+import de.paxii.clarinet.event.EventManager;
+import de.paxii.clarinet.event.events.entity.PostRenderEntityEvent;
+import de.paxii.clarinet.event.events.entity.PreRenderEntityEvent;
+
 import java.util.Collections;
 import java.util.Map;
 import javax.annotation.Nullable;
@@ -390,6 +395,16 @@ public class RenderManager
 
     public void doRenderEntity(Entity entityIn, double x, double y, double z, float yaw, float partialTicks, boolean p_188391_10_)
     {
+        //TODO: Client
+            PreRenderEntityEvent preRenderEvent = new PreRenderEntityEvent(entityIn, x, y, z, partialTicks);
+
+            EventManager.call(preRenderEvent);
+
+            if (preRenderEvent.isCancelled()) {
+                return;
+            }
+        //
+
         Render<Entity> render = null;
 
         try
@@ -439,6 +454,11 @@ public class RenderManager
                     }
                 }
             }
+
+            //TODO: Client
+                PostRenderEntityEvent postRenderEvent = new PostRenderEntityEvent(entityIn, x, y, z, partialTicks);
+                EventManager.call(postRenderEvent);
+            //
         }
         catch (Throwable throwable3)
         {
diff --git a/net/minecraft/client/settings/KeyBinding.java b/net/minecraft/client/settings/KeyBinding.java
index d935c1d..68f52d1 100644
--- a/net/minecraft/client/settings/KeyBinding.java
+++ b/net/minecraft/client/settings/KeyBinding.java
@@ -2,6 +2,10 @@ package net.minecraft.client.settings;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
+
+import de.paxii.clarinet.event.EventManager;
+import de.paxii.clarinet.event.events.game.KeyPressedEvent;
+
 import java.util.List;
 import java.util.Set;
 import net.minecraft.client.resources.I18n;
@@ -26,7 +30,11 @@ public class KeyBinding implements Comparable<KeyBinding>
     {
         if (keyCode != 0)
         {
-            KeyBinding keybinding = (KeyBinding)HASH.lookup(keyCode);
+            //TODO: Client
+            EventManager.call(new KeyPressedEvent(keyCode));
+            //
+
+            KeyBinding keybinding = HASH.lookup(keyCode);
 
             if (keybinding != null)
             {
diff --git a/net/minecraft/enchantment/EnchantmentHelper.java b/net/minecraft/enchantment/EnchantmentHelper.java
index fb1c25b..e0c3941 100644
--- a/net/minecraft/enchantment/EnchantmentHelper.java
+++ b/net/minecraft/enchantment/EnchantmentHelper.java
@@ -84,6 +84,13 @@ public class EnchantmentHelper
             for (int i = 0; i < nbttaglist.tagCount(); ++i)
             {
                 Enchantment enchantment = Enchantment.getEnchantmentByID(nbttaglist.getCompoundTagAt(i).getShort("id"));
+
+                //TODO: Client
+                    if (enchantment == null) {
+                        continue;
+                    }
+                //
+
                 int j = nbttaglist.getCompoundTagAt(i).getShort("lvl");
                 map.put(enchantment, Integer.valueOf(j));
             }
diff --git a/net/minecraft/entity/Entity.java b/net/minecraft/entity/Entity.java
index 6fabb5c..a273d50 100644
--- a/net/minecraft/entity/Entity.java
+++ b/net/minecraft/entity/Entity.java
@@ -3,6 +3,12 @@ package net.minecraft.entity;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
+
+import de.paxii.clarinet.event.EventManager;
+import de.paxii.clarinet.event.events.entity.EntityMoveEvent;
+import de.paxii.clarinet.event.events.entity.PostEntityUpdateEvent;
+import de.paxii.clarinet.event.events.player.PlayerStepEvent;
+
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
@@ -21,6 +27,7 @@ import net.minecraft.block.material.EnumPushReaction;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.block.state.pattern.BlockPattern;
+import net.minecraft.client.entity.EntityPlayerSP;
 import net.minecraft.command.CommandResultStats;
 import net.minecraft.command.ICommandSender;
 import net.minecraft.crash.CrashReport;
@@ -623,6 +630,10 @@ public abstract class Entity implements ICommandSender
 
         this.firstUpdate = false;
         this.world.theProfiler.endSection();
+
+        //TODO: Client
+            EventManager.call(new PostEntityUpdateEvent(this));
+        //
     }
 
     /**
@@ -712,6 +723,16 @@ public abstract class Entity implements ICommandSender
      */
     public void moveEntity(MoverType x, double p_70091_2_, double p_70091_4_, double p_70091_6_)
     {
+        //TODO: Client
+            EntityMoveEvent moveEvent = new EntityMoveEvent(this, p_70091_2_, p_70091_4_, p_70091_6_, this.noClip);
+            EventManager.call(moveEvent);
+
+            p_70091_2_ = moveEvent.getX();
+            p_70091_4_ = moveEvent.getY();
+            p_70091_6_ = moveEvent.getZ();
+            this.noClip = moveEvent.isNoClip();
+        //
+
         if (this.noClip)
         {
             this.setEntityBoundingBox(this.getEntityBoundingBox().offset(p_70091_2_, p_70091_4_, p_70091_6_));
@@ -907,6 +928,10 @@ public abstract class Entity implements ICommandSender
 
             if (this.stepHeight > 0.0F && flag && (d2 != p_70091_2_ || d4 != p_70091_6_))
             {
+                //TODO: Client
+                    double oldY = this.boundingBox.minY;
+                //
+
                 double d14 = p_70091_2_;
                 double d6 = p_70091_4_;
                 double d7 = p_70091_6_;
@@ -1005,6 +1030,12 @@ public abstract class Entity implements ICommandSender
                     p_70091_6_ = d7;
                     this.setEntityBoundingBox(axisalignedbb1);
                 }
+
+                //TODO: Client
+                    if (this instanceof EntityPlayerSP && oldY < this.boundingBox.minY) {
+                        EventManager.call(new PlayerStepEvent(this.boundingBox.minY - oldY));
+                    }
+                //
             }
 
             this.world.theProfiler.endSection();
diff --git a/net/minecraft/entity/EntityLivingBase.java b/net/minecraft/entity/EntityLivingBase.java
index f5f6c95..22e7876 100644
--- a/net/minecraft/entity/EntityLivingBase.java
+++ b/net/minecraft/entity/EntityLivingBase.java
@@ -2,6 +2,9 @@ package net.minecraft.entity;
 
 import com.google.common.base.Objects;
 import com.google.common.collect.Maps;
+
+import de.paxii.clarinet.module.movement.ModuleStrafe;
+
 import java.util.Collection;
 import java.util.ConcurrentModificationException;
 import java.util.Iterator;
@@ -2036,30 +2039,32 @@ public abstract class EntityLivingBase extends Entity
                         float f6 = 0.91F;
                         BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain(this.posX, this.getEntityBoundingBox().minY - 1.0D, this.posZ);
 
-                        if (this.onGround)
-                        {
-                            f6 = this.world.getBlockState(blockpos$pooledmutableblockpos).getBlock().slipperiness * 0.91F;
-                        }
+                        //TODO: Client
+                            if (this.onGround || ModuleStrafe.isActive())
+                            {
+                                f6 = this.world.getBlockState(blockpos$pooledmutableblockpos).getBlock().slipperiness * 0.91F;
+                            }
 
-                        float f7 = 0.16277136F / (f6 * f6 * f6);
-                        float f8;
+                            float f7 = 0.16277136F / (f6 * f6 * f6);
+                            float f8;
 
-                        if (this.onGround)
-                        {
-                            f8 = this.getAIMoveSpeed() * f7;
-                        }
-                        else
-                        {
-                            f8 = this.jumpMovementFactor;
-                        }
+                            if (this.onGround || ModuleStrafe.isActive())
+                            {
+                                f8 = this.getAIMoveSpeed() * f7;
+                            }
+                            else
+                            {
+                                f8 = this.jumpMovementFactor;
+                            }
 
-                        this.moveRelative(strafe, forward, f8);
-                        f6 = 0.91F;
+                            this.moveRelative(strafe, forward, f8);
+                            f6 = 0.91F;
 
-                        if (this.onGround)
-                        {
-                            f6 = this.world.getBlockState(blockpos$pooledmutableblockpos.setPos(this.posX, this.getEntityBoundingBox().minY - 1.0D, this.posZ)).getBlock().slipperiness * 0.91F;
-                        }
+                            if (this.onGround || ModuleStrafe.isActive())
+                            {
+                                f6 = this.world.getBlockState(blockpos$pooledmutableblockpos.setPos(this.posX, this.getEntityBoundingBox().minY - 1.0D, this.posZ)).getBlock().slipperiness * 0.91F;
+                            }
+                        //
 
                         if (this.isOnLadder())
                         {
@@ -3085,4 +3090,10 @@ public abstract class EntityLivingBase extends Entity
     {
         return true;
     }
+
+    //TODO: Client
+        public boolean isUsingItem() {
+        return this.activeItemStack != null;
+    }
+    //
 }
diff --git a/net/minecraft/entity/projectile/EntityFishHook.java b/net/minecraft/entity/projectile/EntityFishHook.java
index 89f2ee3..b60579b 100644
--- a/net/minecraft/entity/projectile/EntityFishHook.java
+++ b/net/minecraft/entity/projectile/EntityFishHook.java
@@ -31,12 +31,17 @@ import net.minecraft.world.WorldServer;
 import net.minecraft.world.storage.loot.LootContext;
 import net.minecraft.world.storage.loot.LootTableList;
 
+import lombok.Getter;
+
 public class EntityFishHook extends Entity
 {
     private static final DataParameter<Integer> DATA_HOOKED_ENTITY = EntityDataManager.<Integer>createKey(EntityFishHook.class, DataSerializers.VARINT);
     private boolean inGround;
     private int ticksInGround = 0;
-    private EntityPlayer angler;
+    //TODO: Client
+        @Getter
+        private EntityPlayer angler;
+    //
     private int ticksInAir;
     private int ticksCatchable;
     private int ticksCaughtDelay;
diff --git a/net/minecraft/network/play/client/CPacketPlayer.java b/net/minecraft/network/play/client/CPacketPlayer.java
index d66f3d0..a59a5fa 100644
--- a/net/minecraft/network/play/client/CPacketPlayer.java
+++ b/net/minecraft/network/play/client/CPacketPlayer.java
@@ -5,14 +5,24 @@ import net.minecraft.network.Packet;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.play.INetHandlerPlayServer;
 
+import lombok.Getter;
+import lombok.Setter;
+
 public class CPacketPlayer implements Packet<INetHandlerPlayServer>
 {
     protected double x;
-    protected double y;
+    //TODO: Client
+        @Getter
+        @Setter
+        protected double y;
+    //
     protected double z;
     protected float yaw;
     protected float pitch;
-    protected boolean onGround;
+    //TODO: Client
+        @Setter
+        protected boolean onGround;
+    //
     protected boolean moving;
     protected boolean rotating;
 
diff --git a/net/minecraft/network/play/server/SPacketEntityVelocity.java b/net/minecraft/network/play/server/SPacketEntityVelocity.java
index 06b7a71..d5811a3 100644
--- a/net/minecraft/network/play/server/SPacketEntityVelocity.java
+++ b/net/minecraft/network/play/server/SPacketEntityVelocity.java
@@ -6,12 +6,19 @@ import net.minecraft.network.Packet;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.play.INetHandlerPlayClient;
 
+import lombok.Setter;
+
 public class SPacketEntityVelocity implements Packet<INetHandlerPlayClient>
 {
     private int entityID;
-    private int motionX;
-    private int motionY;
-    private int motionZ;
+    //TODO: Client
+        @Setter
+        private int motionX;
+        @Setter
+        private int motionY;
+        @Setter
+        private int motionZ;
+    //
 
     public SPacketEntityVelocity()
     {
diff --git a/net/minecraft/util/MovementInputFromOptions.java b/net/minecraft/util/MovementInputFromOptions.java
index ef62e62..0dd0109 100644
--- a/net/minecraft/util/MovementInputFromOptions.java
+++ b/net/minecraft/util/MovementInputFromOptions.java
@@ -1,5 +1,8 @@
 package net.minecraft.util;
 
+import de.paxii.clarinet.event.EventManager;
+import de.paxii.clarinet.event.events.player.UpdatePlayerMoveStateEvent;
+
 import net.minecraft.client.settings.GameSettings;
 
 public class MovementInputFromOptions extends MovementInput
@@ -64,5 +67,11 @@ public class MovementInputFromOptions extends MovementInput
             this.moveStrafe = (float)((double)this.moveStrafe * 0.3D);
             this.moveForward = (float)((double)this.moveForward * 0.3D);
         }
+
+        //TODO: Client
+            UpdatePlayerMoveStateEvent moveStateEvent = EventManager.call(new UpdatePlayerMoveStateEvent(this.moveStrafe, this.moveForward));
+            this.moveStrafe = moveStateEvent.getMoveStrafe();
+            this.moveForward = moveStateEvent.getMoveForward();
+        //
     }
 }
diff --git a/net/minecraft/util/math/MathHelper.java b/net/minecraft/util/math/MathHelper.java
index 99fb73d..2ea507c 100644
--- a/net/minecraft/util/math/MathHelper.java
+++ b/net/minecraft/util/math/MathHelper.java
@@ -64,6 +64,12 @@ public class MathHelper
         return (float)Math.sqrt(value);
     }
 
+    //TODO: Client
+        public static float sqrt_double(double value) {
+        return sqrt(value);
+    }
+    //
+
     /**
      * Returns the greatest integer less than or equal to the float argument
      */
diff --git a/net/minecraft/util/text/TextFormatting.java b/net/minecraft/util/text/TextFormatting.java
index 446e4de..f35db47 100644
--- a/net/minecraft/util/text/TextFormatting.java
+++ b/net/minecraft/util/text/TextFormatting.java
@@ -9,6 +9,8 @@ import java.util.Map;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
 
+import lombok.Getter;
+
 public enum TextFormatting
 {
     BLACK("BLACK", '0', 0),
@@ -46,7 +48,10 @@ public enum TextFormatting
     private final String name;
 
     /** The formatting code that produces this format. */
-    private final char formattingCode;
+    //TODO: Client
+        @Getter
+        private final char formattingCode;
+    //
     private final boolean fancyStyling;
 
     /**
diff --git a/net/minecraft/world/World.java b/net/minecraft/world/World.java
index e142f54..e898eaf 100644
--- a/net/minecraft/world/World.java
+++ b/net/minecraft/world/World.java
@@ -4,6 +4,11 @@ import com.google.common.base.Function;
 import com.google.common.base.Objects;
 import com.google.common.base.Predicate;
 import com.google.common.collect.Lists;
+
+import de.paxii.clarinet.Wrapper;
+import de.paxii.clarinet.event.EventManager;
+import de.paxii.clarinet.event.events.game.LoadWorldEvent;
+
 import java.util.Calendar;
 import java.util.Collection;
 import java.util.Iterator;
@@ -1222,6 +1227,12 @@ public abstract class World implements IBlockAccess
      */
     public boolean spawnEntityInWorld(Entity entityIn)
     {
+        //TODO: Client
+            if (entityIn == Wrapper.getPlayer()) {
+                EventManager.call(new LoadWorldEvent(this));
+            }
+        //
+
         int i = MathHelper.floor(entityIn.posX / 16.0D);
         int j = MathHelper.floor(entityIn.posZ / 16.0D);
         boolean flag = entityIn.forceSpawn;
@@ -3936,4 +3947,65 @@ public abstract class World implements IBlockAccess
     {
         return null;
     }
+
+    //TODO: Client
+        public Block getBlock(int x, int y, int z) {
+            BlockPos blockPos = new BlockPos(x, y, z);
+
+            return this.getBlockState(blockPos).getBlock();
+        }
+
+        public List<AxisAlignedBB> getCollidingBoundingBoxes(Entity entityIn, AxisAlignedBB bb) {
+            return this.getCollisionBoxes(entityIn, bb);
+        }
+
+        public List<AxisAlignedBB> isAABBInMaterial(@Nullable Entity entityIn, AxisAlignedBB aabb) {
+            return this.getCollisionBoxes(entityIn, aabb);
+        }
+
+        /**
+         * checks if the given AABB is in the material given. Used while swimming.
+         */
+        public boolean isAABBInMaterial(AxisAlignedBB bb, Material materialIn)
+        {
+            int i = MathHelper.floor(bb.minX);
+            int j = MathHelper.ceil(bb.maxX);
+            int k = MathHelper.floor(bb.minY);
+            int l = MathHelper.ceil(bb.maxY);
+            int i1 = MathHelper.floor(bb.minZ);
+            int j1 = MathHelper.ceil(bb.maxZ);
+            BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
+
+            for (int k1 = i; k1 < j; ++k1)
+            {
+                for (int l1 = k; l1 < l; ++l1)
+                {
+                    for (int i2 = i1; i2 < j1; ++i2)
+                    {
+                        IBlockState iblockstate = this.getBlockState(blockpos$pooledmutableblockpos.setPos(k1, l1, i2));
+
+                        if (iblockstate.getMaterial() == materialIn)
+                        {
+                            int j2 = (iblockstate.getValue(BlockLiquid.LEVEL)).intValue();
+                            double d0 = (double)(l1 + 1);
+
+                            if (j2 < 8)
+                            {
+                                d0 = (double)(l1 + 1) - (double)j2 / 8.0D;
+                            }
+
+                            if (d0 >= bb.minY)
+                            {
+                                blockpos$pooledmutableblockpos.release();
+                                return true;
+                            }
+                        }
+                    }
+                }
+            }
+
+            blockpos$pooledmutableblockpos.release();
+            return false;
+        }
+    //
 }
diff --git a/net/minecraft/world/WorldProvider.java b/net/minecraft/world/WorldProvider.java
index d0ec8ad..b5b08ce 100644
--- a/net/minecraft/world/WorldProvider.java
+++ b/net/minecraft/world/WorldProvider.java
@@ -61,7 +61,8 @@ public abstract class WorldProvider
     /**
      * Creates the light to brightness table
      */
-    protected void generateLightBrightnessTable()
+    //TODO: Client
+    public void generateLightBrightnessTable()
     {
         float f = 0.0F;
 
diff --git a/net/minecraft/world/WorldProviderHell.java b/net/minecraft/world/WorldProviderHell.java
index 511669d..8e6f17f 100644
--- a/net/minecraft/world/WorldProviderHell.java
+++ b/net/minecraft/world/WorldProviderHell.java
@@ -30,7 +30,7 @@ public class WorldProviderHell extends WorldProvider
     /**
      * Creates the light to brightness table
      */
-    protected void generateLightBrightnessTable()
+    public void generateLightBrightnessTable()
     {
         float f = 0.1F;
 
